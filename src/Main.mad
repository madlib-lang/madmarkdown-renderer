import { Left, Right } from "Either"
import {
  parseMarkdown,
  Bold,
  Block,
  Blockquote,
  Code,
  Content,
  ContentPart,
  H1,
  H2,
  H3,
  H4,
  H5,
  H6,
  Image,
  InlineCode,
  Italic,
  LineReturn,
  Link,
  Markdown,
  Paragraph,
  UnorderedList,
  Text
} from "MarkdownParser"
import {
  a,
  alt,
  blockquote,
  br,
  className,
  code,
  div,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  href,
  i,
  img,
  li,
  p,
  span,
  src,
  strong,
  title,
  ul,
  text,
  Element,
  View
} from "MadUI"

doRender :: View Markdown
doRender = (markdown) =>
  <div className="markdown">
    {map(renderBlock, markdown)}
  </div>

renderBlock :: View Block
renderBlock = where
  is H1 content:
    <h1>{renderContent(content)}</h1>

  is H2 content:
    <h2>{renderContent(content)}</h2>

  is H3 content:
    <h3>{renderContent(content)}</h3>

  is H4 content:
    <h4>{renderContent(content)}</h4>

  is H5 content:
    <h5>{renderContent(content)}</h5>

  is H6 content:
    <h6>{renderContent(content)}</h6>

  is Paragraph content:
    <p>{renderContent(content)}</p>

  is Blockquote content:
    <blockquote>{renderContent(content)}</blockquote>

  is Code _ content:
    <code>{content}</code>

  is UnorderedList items:
    <ul>{map((item) => <li>{renderContent(item)}</li>, items)}</ul>

renderContentPart :: View ContentPart
renderContentPart = where
  is Text t      : <span className="markdown__text">{t}</span>
  is Bold t      : <strong className="markdown__bold">{t}</strong>
  is Italic t    : <i className="markdown__italic">{t}</i>
  is InlineCode t: <span className="markdown__inline-code">{t}</span>
  is Link t l    : <a className="markdown__link" href={l}>{t}</a>
  is Image alt_ s: <img className="markdown__image" src={s} alt={alt_} />
  is LineReturn  : <br />

renderContent :: Content -> List Element
renderContent = map(renderContentPart)

/**
 * Returns an Element from a given markdown String
 *
 * @since 0.0.1
 * @example
 * renderMarkdown(`# Hello world`)
 */
renderMarkdown :: View String
export renderMarkdown = pipe(
  parseMarkdown,
  where
    is Right ast: doRender(ast)
    is Left _   : <p>Error processing the given markdown</p>
)
